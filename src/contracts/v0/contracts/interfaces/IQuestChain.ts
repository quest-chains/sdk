/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common';

export interface IQuestChainInterface extends utils.Interface {
  functions: {
    'burnToken(address)': FunctionFragment;
    'createQuest(string)': FunctionFragment;
    'edit(string)': FunctionFragment;
    'editQuest(uint256,string)': FunctionFragment;
    'getTokenURI()': FunctionFragment;
    'init(address,string,string)': FunctionFragment;
    'initWithRoles(address,string,string,address[],address[],address[])': FunctionFragment;
    'mintToken(address)': FunctionFragment;
    'questChainFactory()': FunctionFragment;
    'questChainId()': FunctionFragment;
    'questChainToken()': FunctionFragment;
    'questStatus(address,uint256)': FunctionFragment;
    'reviewProof(address,uint256,bool,string)': FunctionFragment;
    'setTokenURI(string)': FunctionFragment;
    'submitProof(uint256,string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'burnToken'
      | 'createQuest'
      | 'edit'
      | 'editQuest'
      | 'getTokenURI'
      | 'init'
      | 'initWithRoles'
      | 'mintToken'
      | 'questChainFactory'
      | 'questChainId'
      | 'questChainToken'
      | 'questStatus'
      | 'reviewProof'
      | 'setTokenURI'
      | 'submitProof',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'burnToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'createQuest', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'edit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'editQuest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getTokenURI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'init',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initWithRoles',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'mintToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'questChainFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'questStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'reviewProof',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setTokenURI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'submitProof',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'burnToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createQuest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'edit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'editQuest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initWithRoles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reviewProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitProof', data: BytesLike): Result;

  events: {
    'QuestChainCreated(address,string)': EventFragment;
    'QuestChainEdited(address,string)': EventFragment;
    'QuestChainTokenURIUpdated(string)': EventFragment;
    'QuestCreated(address,uint256,string)': EventFragment;
    'QuestEdited(address,uint256,string)': EventFragment;
    'QuestPaused(address,uint256)': EventFragment;
    'QuestProofReviewed(address,address,uint256,bool,string)': EventFragment;
    'QuestProofSubmitted(address,uint256,string)': EventFragment;
    'QuestUnpaused(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'QuestChainCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestChainEdited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestChainTokenURIUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestEdited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestProofReviewed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestProofSubmitted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestUnpaused'): EventFragment;
}

export interface QuestChainCreatedEventObject {
  creator: string;
  details: string;
}
export type QuestChainCreatedEvent = TypedEvent<[string, string], QuestChainCreatedEventObject>;

export type QuestChainCreatedEventFilter = TypedEventFilter<QuestChainCreatedEvent>;

export interface QuestChainEditedEventObject {
  editor: string;
  details: string;
}
export type QuestChainEditedEvent = TypedEvent<[string, string], QuestChainEditedEventObject>;

export type QuestChainEditedEventFilter = TypedEventFilter<QuestChainEditedEvent>;

export interface QuestChainTokenURIUpdatedEventObject {
  tokenURI: string;
}
export type QuestChainTokenURIUpdatedEvent = TypedEvent<[string], QuestChainTokenURIUpdatedEventObject>;

export type QuestChainTokenURIUpdatedEventFilter = TypedEventFilter<QuestChainTokenURIUpdatedEvent>;

export interface QuestCreatedEventObject {
  creator: string;
  questId: BigNumber;
  details: string;
}
export type QuestCreatedEvent = TypedEvent<[string, BigNumber, string], QuestCreatedEventObject>;

export type QuestCreatedEventFilter = TypedEventFilter<QuestCreatedEvent>;

export interface QuestEditedEventObject {
  editor: string;
  questId: BigNumber;
  details: string;
}
export type QuestEditedEvent = TypedEvent<[string, BigNumber, string], QuestEditedEventObject>;

export type QuestEditedEventFilter = TypedEventFilter<QuestEditedEvent>;

export interface QuestPausedEventObject {
  editor: string;
  questId: BigNumber;
}
export type QuestPausedEvent = TypedEvent<[string, BigNumber], QuestPausedEventObject>;

export type QuestPausedEventFilter = TypedEventFilter<QuestPausedEvent>;

export interface QuestProofReviewedEventObject {
  reviewer: string;
  quester: string;
  questId: BigNumber;
  success: boolean;
  details: string;
}
export type QuestProofReviewedEvent = TypedEvent<
  [string, string, BigNumber, boolean, string],
  QuestProofReviewedEventObject
>;

export type QuestProofReviewedEventFilter = TypedEventFilter<QuestProofReviewedEvent>;

export interface QuestProofSubmittedEventObject {
  quester: string;
  questId: BigNumber;
  proof: string;
}
export type QuestProofSubmittedEvent = TypedEvent<[string, BigNumber, string], QuestProofSubmittedEventObject>;

export type QuestProofSubmittedEventFilter = TypedEventFilter<QuestProofSubmittedEvent>;

export interface QuestUnpausedEventObject {
  editor: string;
  questId: BigNumber;
}
export type QuestUnpausedEvent = TypedEvent<[string, BigNumber], QuestUnpausedEventObject>;

export type QuestUnpausedEventFilter = TypedEventFilter<QuestUnpausedEvent>;

export interface IQuestChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IQuestChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createQuest(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    edit(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getTokenURI(overrides?: CallOverrides): Promise<[string]>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    questChainFactory(overrides?: CallOverrides): Promise<[string]>;

    questChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    questChainToken(overrides?: CallOverrides): Promise<[string]>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTokenURI(
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  burnToken(
    _quester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createQuest(
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  edit(
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  editQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getTokenURI(overrides?: CallOverrides): Promise<string>;

  init(
    _owner: PromiseOrValue<string>,
    _details: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initWithRoles(
    _owner: PromiseOrValue<string>,
    _details: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    _admins: PromiseOrValue<string>[],
    _editors: PromiseOrValue<string>[],
    _reviewers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintToken(
    _quester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  questChainFactory(overrides?: CallOverrides): Promise<string>;

  questChainId(overrides?: CallOverrides): Promise<BigNumber>;

  questChainToken(overrides?: CallOverrides): Promise<string>;

  questStatus(
    _quester: PromiseOrValue<string>,
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<number>;

  reviewProof(
    _quester: PromiseOrValue<string>,
    _questId: PromiseOrValue<BigNumberish>,
    _success: PromiseOrValue<boolean>,
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTokenURI(
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  submitProof(
    _questId: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    burnToken(_quester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    createQuest(_details: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    edit(_details: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getTokenURI(overrides?: CallOverrides): Promise<string>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    mintToken(_quester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    questChainFactory(overrides?: CallOverrides): Promise<string>;

    questChainId(overrides?: CallOverrides): Promise<BigNumber>;

    questChainToken(overrides?: CallOverrides): Promise<string>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<number>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTokenURI(_tokenURI: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'QuestChainCreated(address,string)'(
      creator?: PromiseOrValue<string> | null,
      details?: null,
    ): QuestChainCreatedEventFilter;
    QuestChainCreated(creator?: PromiseOrValue<string> | null, details?: null): QuestChainCreatedEventFilter;

    'QuestChainEdited(address,string)'(
      editor?: PromiseOrValue<string> | null,
      details?: null,
    ): QuestChainEditedEventFilter;
    QuestChainEdited(editor?: PromiseOrValue<string> | null, details?: null): QuestChainEditedEventFilter;

    'QuestChainTokenURIUpdated(string)'(tokenURI?: null): QuestChainTokenURIUpdatedEventFilter;
    QuestChainTokenURIUpdated(tokenURI?: null): QuestChainTokenURIUpdatedEventFilter;

    'QuestCreated(address,uint256,string)'(
      creator?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestCreatedEventFilter;
    QuestCreated(
      creator?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestCreatedEventFilter;

    'QuestEdited(address,uint256,string)'(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestEditedEventFilter;
    QuestEdited(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestEditedEventFilter;

    'QuestPaused(address,uint256)'(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestPausedEventFilter;
    QuestPaused(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestPausedEventFilter;

    'QuestProofReviewed(address,address,uint256,bool,string)'(
      reviewer?: PromiseOrValue<string> | null,
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      details?: null,
    ): QuestProofReviewedEventFilter;
    QuestProofReviewed(
      reviewer?: PromiseOrValue<string> | null,
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      details?: null,
    ): QuestProofReviewedEventFilter;

    'QuestProofSubmitted(address,uint256,string)'(
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      proof?: null,
    ): QuestProofSubmittedEventFilter;
    QuestProofSubmitted(
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      proof?: null,
    ): QuestProofSubmittedEventFilter;

    'QuestUnpaused(address,uint256)'(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestUnpausedEventFilter;
    QuestUnpaused(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestUnpausedEventFilter;
  };

  estimateGas: {
    burnToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createQuest(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    edit(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    questChainFactory(overrides?: CallOverrides): Promise<BigNumber>;

    questChainId(overrides?: CallOverrides): Promise<BigNumber>;

    questChainToken(overrides?: CallOverrides): Promise<BigNumber>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTokenURI(
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createQuest(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    edit(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    questChainFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
