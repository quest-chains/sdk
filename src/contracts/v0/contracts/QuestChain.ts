/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export interface QuestChainInterface extends utils.Interface {
  functions: {
    'ADMIN_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'EDITOR_ROLE()': FunctionFragment;
    'OWNER_ROLE()': FunctionFragment;
    'REVIEWER_ROLE()': FunctionFragment;
    'burnToken(address)': FunctionFragment;
    'createQuest(string)': FunctionFragment;
    'edit(string)': FunctionFragment;
    'editQuest(uint256,string)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getTokenURI()': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'init(address,string,string)': FunctionFragment;
    'initWithRoles(address,string,string,address[],address[],address[])': FunctionFragment;
    'mintToken(address)': FunctionFragment;
    'pause()': FunctionFragment;
    'pauseQuest(uint256)': FunctionFragment;
    'paused()': FunctionFragment;
    'questChainFactory()': FunctionFragment;
    'questChainId()': FunctionFragment;
    'questChainToken()': FunctionFragment;
    'questCount()': FunctionFragment;
    'questPaused(uint256)': FunctionFragment;
    'questStatus(address,uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'reviewProof(address,uint256,bool,string)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setTokenURI(string)': FunctionFragment;
    'submitProof(uint256,string)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'unpause()': FunctionFragment;
    'unpauseQuest(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'EDITOR_ROLE'
      | 'OWNER_ROLE'
      | 'REVIEWER_ROLE'
      | 'burnToken'
      | 'createQuest'
      | 'edit'
      | 'editQuest'
      | 'getRoleAdmin'
      | 'getTokenURI'
      | 'grantRole'
      | 'hasRole'
      | 'init'
      | 'initWithRoles'
      | 'mintToken'
      | 'pause'
      | 'pauseQuest'
      | 'paused'
      | 'questChainFactory'
      | 'questChainId'
      | 'questChainToken'
      | 'questCount'
      | 'questPaused'
      | 'questStatus'
      | 'renounceRole'
      | 'reviewProof'
      | 'revokeRole'
      | 'setTokenURI'
      | 'submitProof'
      | 'supportsInterface'
      | 'unpause'
      | 'unpauseQuest',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'EDITOR_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'OWNER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REVIEWER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'burnToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'createQuest', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'edit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'editQuest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getTokenURI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'init',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initWithRoles',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'mintToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseQuest', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questPaused', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'questStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'reviewProof',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setTokenURI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'submitProof',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpauseQuest', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'EDITOR_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'OWNER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REVIEWER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createQuest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'edit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'editQuest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initWithRoles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseQuest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reviewProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpauseQuest', data: BytesLike): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'Paused(address)': EventFragment;
    'QuestChainCreated(address,string)': EventFragment;
    'QuestChainEdited(address,string)': EventFragment;
    'QuestChainTokenURIUpdated(string)': EventFragment;
    'QuestCreated(address,uint256,string)': EventFragment;
    'QuestEdited(address,uint256,string)': EventFragment;
    'QuestPaused(address,uint256)': EventFragment;
    'QuestProofReviewed(address,address,uint256,bool,string)': EventFragment;
    'QuestProofSubmitted(address,uint256,string)': EventFragment;
    'QuestUnpaused(address,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestChainCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestChainEdited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestChainTokenURIUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestEdited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestProofReviewed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestProofSubmitted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestUnpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface QuestChainCreatedEventObject {
  creator: string;
  details: string;
}
export type QuestChainCreatedEvent = TypedEvent<[string, string], QuestChainCreatedEventObject>;

export type QuestChainCreatedEventFilter = TypedEventFilter<QuestChainCreatedEvent>;

export interface QuestChainEditedEventObject {
  editor: string;
  details: string;
}
export type QuestChainEditedEvent = TypedEvent<[string, string], QuestChainEditedEventObject>;

export type QuestChainEditedEventFilter = TypedEventFilter<QuestChainEditedEvent>;

export interface QuestChainTokenURIUpdatedEventObject {
  tokenURI: string;
}
export type QuestChainTokenURIUpdatedEvent = TypedEvent<[string], QuestChainTokenURIUpdatedEventObject>;

export type QuestChainTokenURIUpdatedEventFilter = TypedEventFilter<QuestChainTokenURIUpdatedEvent>;

export interface QuestCreatedEventObject {
  creator: string;
  questId: BigNumber;
  details: string;
}
export type QuestCreatedEvent = TypedEvent<[string, BigNumber, string], QuestCreatedEventObject>;

export type QuestCreatedEventFilter = TypedEventFilter<QuestCreatedEvent>;

export interface QuestEditedEventObject {
  editor: string;
  questId: BigNumber;
  details: string;
}
export type QuestEditedEvent = TypedEvent<[string, BigNumber, string], QuestEditedEventObject>;

export type QuestEditedEventFilter = TypedEventFilter<QuestEditedEvent>;

export interface QuestPausedEventObject {
  editor: string;
  questId: BigNumber;
}
export type QuestPausedEvent = TypedEvent<[string, BigNumber], QuestPausedEventObject>;

export type QuestPausedEventFilter = TypedEventFilter<QuestPausedEvent>;

export interface QuestProofReviewedEventObject {
  reviewer: string;
  quester: string;
  questId: BigNumber;
  success: boolean;
  details: string;
}
export type QuestProofReviewedEvent = TypedEvent<
  [string, string, BigNumber, boolean, string],
  QuestProofReviewedEventObject
>;

export type QuestProofReviewedEventFilter = TypedEventFilter<QuestProofReviewedEvent>;

export interface QuestProofSubmittedEventObject {
  quester: string;
  questId: BigNumber;
  proof: string;
}
export type QuestProofSubmittedEvent = TypedEvent<[string, BigNumber, string], QuestProofSubmittedEventObject>;

export type QuestProofSubmittedEventFilter = TypedEventFilter<QuestProofSubmittedEvent>;

export interface QuestUnpausedEventObject {
  editor: string;
  questId: BigNumber;
}
export type QuestUnpausedEvent = TypedEvent<[string, BigNumber], QuestUnpausedEventObject>;

export type QuestUnpausedEventFilter = TypedEventFilter<QuestUnpausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface QuestChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REVIEWER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    burnToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createQuest(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    edit(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getTokenURI(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pauseQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    questChainFactory(overrides?: CallOverrides): Promise<[string]>;

    questChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    questChainToken(overrides?: CallOverrides): Promise<[string]>;

    questCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    questPaused(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number] & { status: number }>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTokenURI(
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unpauseQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  REVIEWER_ROLE(overrides?: CallOverrides): Promise<string>;

  burnToken(
    _quester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createQuest(
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  edit(
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  editQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getTokenURI(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  init(
    _owner: PromiseOrValue<string>,
    _details: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initWithRoles(
    _owner: PromiseOrValue<string>,
    _details: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    _admins: PromiseOrValue<string>[],
    _editors: PromiseOrValue<string>[],
    _reviewers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintToken(
    _quester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  pauseQuest(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  questChainFactory(overrides?: CallOverrides): Promise<string>;

  questChainId(overrides?: CallOverrides): Promise<BigNumber>;

  questChainToken(overrides?: CallOverrides): Promise<string>;

  questCount(overrides?: CallOverrides): Promise<BigNumber>;

  questPaused(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  questStatus(
    _quester: PromiseOrValue<string>,
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<number>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reviewProof(
    _quester: PromiseOrValue<string>,
    _questId: PromiseOrValue<BigNumberish>,
    _success: PromiseOrValue<boolean>,
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTokenURI(
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  submitProof(
    _questId: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unpauseQuest(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    REVIEWER_ROLE(overrides?: CallOverrides): Promise<string>;

    burnToken(_quester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    createQuest(_details: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    edit(_details: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getTokenURI(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    mintToken(_quester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseQuest(_questId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    questChainFactory(overrides?: CallOverrides): Promise<string>;

    questChainId(overrides?: CallOverrides): Promise<BigNumber>;

    questChainToken(overrides?: CallOverrides): Promise<string>;

    questCount(overrides?: CallOverrides): Promise<BigNumber>;

    questPaused(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<number>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTokenURI(_tokenURI: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unpauseQuest(_questId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'QuestChainCreated(address,string)'(
      creator?: PromiseOrValue<string> | null,
      details?: null,
    ): QuestChainCreatedEventFilter;
    QuestChainCreated(creator?: PromiseOrValue<string> | null, details?: null): QuestChainCreatedEventFilter;

    'QuestChainEdited(address,string)'(
      editor?: PromiseOrValue<string> | null,
      details?: null,
    ): QuestChainEditedEventFilter;
    QuestChainEdited(editor?: PromiseOrValue<string> | null, details?: null): QuestChainEditedEventFilter;

    'QuestChainTokenURIUpdated(string)'(tokenURI?: null): QuestChainTokenURIUpdatedEventFilter;
    QuestChainTokenURIUpdated(tokenURI?: null): QuestChainTokenURIUpdatedEventFilter;

    'QuestCreated(address,uint256,string)'(
      creator?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestCreatedEventFilter;
    QuestCreated(
      creator?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestCreatedEventFilter;

    'QuestEdited(address,uint256,string)'(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestEditedEventFilter;
    QuestEdited(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      details?: null,
    ): QuestEditedEventFilter;

    'QuestPaused(address,uint256)'(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestPausedEventFilter;
    QuestPaused(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestPausedEventFilter;

    'QuestProofReviewed(address,address,uint256,bool,string)'(
      reviewer?: PromiseOrValue<string> | null,
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      details?: null,
    ): QuestProofReviewedEventFilter;
    QuestProofReviewed(
      reviewer?: PromiseOrValue<string> | null,
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      details?: null,
    ): QuestProofReviewedEventFilter;

    'QuestProofSubmitted(address,uint256,string)'(
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      proof?: null,
    ): QuestProofSubmittedEventFilter;
    QuestProofSubmitted(
      quester?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
      proof?: null,
    ): QuestProofSubmittedEventFilter;

    'QuestUnpaused(address,uint256)'(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestUnpausedEventFilter;
    QuestUnpaused(
      editor?: PromiseOrValue<string> | null,
      questId?: PromiseOrValue<BigNumberish> | null,
    ): QuestUnpausedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REVIEWER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    burnToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createQuest(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    edit(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    pauseQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    questChainFactory(overrides?: CallOverrides): Promise<BigNumber>;

    questChainId(overrides?: CallOverrides): Promise<BigNumber>;

    questChainToken(overrides?: CallOverrides): Promise<BigNumber>;

    questCount(overrides?: CallOverrides): Promise<BigNumber>;

    questPaused(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTokenURI(
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unpauseQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVIEWER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createQuest(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    edit(
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    editQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    init(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initWithRoles(
      _owner: PromiseOrValue<string>,
      _details: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      _editors: PromiseOrValue<string>[],
      _reviewers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintToken(
      _quester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    pauseQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questPaused(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questStatus(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reviewProof(
      _quester: PromiseOrValue<string>,
      _questId: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    submitProof(
      _questId: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unpauseQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
