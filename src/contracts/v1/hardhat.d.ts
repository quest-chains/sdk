/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from '@nomiclabs/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'AccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: 'Pausable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: 'ERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: 'IERC1155MetadataURI',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: 'IERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: 'IERC1155Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'ERC20Permit',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: 'IERC20Permit',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'IERC20Token',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Token__factory>;
    getContractFactory(
      name: 'IQuestChain',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IQuestChain__factory>;
    getContractFactory(
      name: 'IQuestChainFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IQuestChainFactory__factory>;
    getContractFactory(
      name: 'IQuestChainToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IQuestChainToken__factory>;
    getContractFactory(
      name: 'MockERC20Token',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockERC20Token__factory>;
    getContractFactory(
      name: 'QuestChain',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.QuestChain__factory>;
    getContractFactory(
      name: 'QuestChainFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.QuestChainFactory__factory>;
    getContractFactory(
      name: 'QuestChainToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.QuestChainToken__factory>;

    getContractAt(name: 'AccessControl', address: string, signer?: ethers.Signer): Promise<Contracts.AccessControl>;
    getContractAt(name: 'IAccessControl', address: string, signer?: ethers.Signer): Promise<Contracts.IAccessControl>;
    getContractAt(name: 'Initializable', address: string, signer?: ethers.Signer): Promise<Contracts.Initializable>;
    getContractAt(name: 'Pausable', address: string, signer?: ethers.Signer): Promise<Contracts.Pausable>;
    getContractAt(name: 'ERC1155', address: string, signer?: ethers.Signer): Promise<Contracts.ERC1155>;
    getContractAt(
      name: 'IERC1155MetadataURI',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(name: 'IERC1155', address: string, signer?: ethers.Signer): Promise<Contracts.IERC1155>;
    getContractAt(
      name: 'IERC1155Receiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(name: 'ERC20', address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(name: 'ERC20Permit', address: string, signer?: ethers.Signer): Promise<Contracts.ERC20Permit>;
    getContractAt(name: 'IERC20Permit', address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Permit>;
    getContractAt(name: 'IERC20Metadata', address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Metadata>;
    getContractAt(name: 'IERC20', address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(name: 'ERC165', address: string, signer?: ethers.Signer): Promise<Contracts.ERC165>;
    getContractAt(name: 'IERC165', address: string, signer?: ethers.Signer): Promise<Contracts.IERC165>;
    getContractAt(name: 'IERC20Token', address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Token>;
    getContractAt(name: 'IQuestChain', address: string, signer?: ethers.Signer): Promise<Contracts.IQuestChain>;
    getContractAt(
      name: 'IQuestChainFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IQuestChainFactory>;
    getContractAt(
      name: 'IQuestChainToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IQuestChainToken>;
    getContractAt(name: 'MockERC20Token', address: string, signer?: ethers.Signer): Promise<Contracts.MockERC20Token>;
    getContractAt(name: 'QuestChain', address: string, signer?: ethers.Signer): Promise<Contracts.QuestChain>;
    getContractAt(
      name: 'QuestChainFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.QuestChainFactory>;
    getContractAt(name: 'QuestChainToken', address: string, signer?: ethers.Signer): Promise<Contracts.QuestChainToken>;

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
  }
}
