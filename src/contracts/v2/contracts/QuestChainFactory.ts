/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export declare namespace QuestChainCommons {
  export type QuestChainInfoStruct = {
    owners: PromiseOrValue<string>[];
    admins: PromiseOrValue<string>[];
    editors: PromiseOrValue<string>[];
    reviewers: PromiseOrValue<string>[];
    quests: PromiseOrValue<string>[];
    paused: PromiseOrValue<boolean>;
    details: PromiseOrValue<string>;
    tokenURI: PromiseOrValue<string>;
  };

  export type QuestChainInfoStructOutput = [
    string[],
    string[],
    string[],
    string[],
    string[],
    boolean,
    string,
    string,
  ] & {
    owners: string[];
    admins: string[];
    editors: string[];
    reviewers: string[];
    quests: string[];
    paused: boolean;
    details: string;
    tokenURI: string;
  };
}

export interface QuestChainFactoryInterface extends utils.Interface {
  functions: {
    'admin()': FunctionFragment;
    'adminProposalTimestamp()': FunctionFragment;
    'create((address[],address[],address[],address[],string[],bool,string,string),bytes32)': FunctionFragment;
    'createAndUpgrade((address[],address[],address[],address[],string[],bool,string,string),bytes32)': FunctionFragment;
    'createAndUpgradeWithPermit((address[],address[],address[],address[],string[],bool,string,string),bytes32,uint256,bytes)': FunctionFragment;
    'executeAdminReplace()': FunctionFragment;
    'executePaymentTokenReplace()': FunctionFragment;
    'executeUpgradeFeeReplace()': FunctionFragment;
    'getQuestChainAddress(uint256)': FunctionFragment;
    'paymentToken()': FunctionFragment;
    'paymentTokenProposalTimestamp()': FunctionFragment;
    'proposeAdminReplace(address)': FunctionFragment;
    'proposePaymentTokenReplace(address)': FunctionFragment;
    'proposeUpgradeFeeReplace(uint256)': FunctionFragment;
    'proposedAdmin()': FunctionFragment;
    'proposedPaymentToken()': FunctionFragment;
    'proposedUpgradeFee()': FunctionFragment;
    'questChainCount()': FunctionFragment;
    'questChainTemplate()': FunctionFragment;
    'questChainToken()': FunctionFragment;
    'treasury()': FunctionFragment;
    'upgradeFee()': FunctionFragment;
    'upgradeFeeProposalTimestamp()': FunctionFragment;
    'upgradeQuestChain(address)': FunctionFragment;
    'upgradeQuestChainWithPermit(address,uint256,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'admin'
      | 'adminProposalTimestamp'
      | 'create'
      | 'createAndUpgrade'
      | 'createAndUpgradeWithPermit'
      | 'executeAdminReplace'
      | 'executePaymentTokenReplace'
      | 'executeUpgradeFeeReplace'
      | 'getQuestChainAddress'
      | 'paymentToken'
      | 'paymentTokenProposalTimestamp'
      | 'proposeAdminReplace'
      | 'proposePaymentTokenReplace'
      | 'proposeUpgradeFeeReplace'
      | 'proposedAdmin'
      | 'proposedPaymentToken'
      | 'proposedUpgradeFee'
      | 'questChainCount'
      | 'questChainTemplate'
      | 'questChainToken'
      | 'treasury'
      | 'upgradeFee'
      | 'upgradeFeeProposalTimestamp'
      | 'upgradeQuestChain'
      | 'upgradeQuestChainWithPermit',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminProposalTimestamp', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'create',
    values: [QuestChainCommons.QuestChainInfoStruct, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createAndUpgrade',
    values: [QuestChainCommons.QuestChainInfoStruct, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createAndUpgradeWithPermit',
    values: [
      QuestChainCommons.QuestChainInfoStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'executeAdminReplace', values?: undefined): string;
  encodeFunctionData(functionFragment: 'executePaymentTokenReplace', values?: undefined): string;
  encodeFunctionData(functionFragment: 'executeUpgradeFeeReplace', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getQuestChainAddress', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'paymentToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paymentTokenProposalTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proposeAdminReplace', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'proposePaymentTokenReplace', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'proposeUpgradeFeeReplace', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'proposedAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proposedPaymentToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proposedUpgradeFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainTemplate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'questChainToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeFeeProposalTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeQuestChain', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeQuestChainWithPermit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminProposalTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createAndUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createAndUpgradeWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeAdminReplace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executePaymentTokenReplace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeUpgradeFeeReplace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getQuestChainAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paymentToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paymentTokenProposalTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeAdminReplace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposePaymentTokenReplace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeUpgradeFeeReplace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposedAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposedPaymentToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposedUpgradeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainTemplate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'questChainToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeFeeProposalTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeQuestChain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeQuestChainWithPermit', data: BytesLike): Result;

  events: {
    'AdminReplaceProposed(address)': EventFragment;
    'AdminReplaced(address)': EventFragment;
    'FactorySetup()': EventFragment;
    'PaymentTokenReplaceProposed(address)': EventFragment;
    'PaymentTokenReplaced(address)': EventFragment;
    'QuestChainCreated(uint256,address)': EventFragment;
    'QuestChainUpgraded(address,address)': EventFragment;
    'UpgradeFeeReplaceProposed(uint256)': EventFragment;
    'UpgradeFeeReplaced(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminReplaceProposed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdminReplaced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FactorySetup'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PaymentTokenReplaceProposed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PaymentTokenReplaced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestChainCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuestChainUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpgradeFeeReplaceProposed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpgradeFeeReplaced'): EventFragment;
}

export interface AdminReplaceProposedEventObject {
  proposedAdmin: string;
}
export type AdminReplaceProposedEvent = TypedEvent<[string], AdminReplaceProposedEventObject>;

export type AdminReplaceProposedEventFilter = TypedEventFilter<AdminReplaceProposedEvent>;

export interface AdminReplacedEventObject {
  admin: string;
}
export type AdminReplacedEvent = TypedEvent<[string], AdminReplacedEventObject>;

export type AdminReplacedEventFilter = TypedEventFilter<AdminReplacedEvent>;

export interface FactorySetupEventObject {}
export type FactorySetupEvent = TypedEvent<[], FactorySetupEventObject>;

export type FactorySetupEventFilter = TypedEventFilter<FactorySetupEvent>;

export interface PaymentTokenReplaceProposedEventObject {
  proposedPaymentToken: string;
}
export type PaymentTokenReplaceProposedEvent = TypedEvent<[string], PaymentTokenReplaceProposedEventObject>;

export type PaymentTokenReplaceProposedEventFilter = TypedEventFilter<PaymentTokenReplaceProposedEvent>;

export interface PaymentTokenReplacedEventObject {
  paymentToken: string;
}
export type PaymentTokenReplacedEvent = TypedEvent<[string], PaymentTokenReplacedEventObject>;

export type PaymentTokenReplacedEventFilter = TypedEventFilter<PaymentTokenReplacedEvent>;

export interface QuestChainCreatedEventObject {
  index: BigNumber;
  questChain: string;
}
export type QuestChainCreatedEvent = TypedEvent<[BigNumber, string], QuestChainCreatedEventObject>;

export type QuestChainCreatedEventFilter = TypedEventFilter<QuestChainCreatedEvent>;

export interface QuestChainUpgradedEventObject {
  sender: string;
  questChain: string;
}
export type QuestChainUpgradedEvent = TypedEvent<[string, string], QuestChainUpgradedEventObject>;

export type QuestChainUpgradedEventFilter = TypedEventFilter<QuestChainUpgradedEvent>;

export interface UpgradeFeeReplaceProposedEventObject {
  proposedUpgradeFee: BigNumber;
}
export type UpgradeFeeReplaceProposedEvent = TypedEvent<[BigNumber], UpgradeFeeReplaceProposedEventObject>;

export type UpgradeFeeReplaceProposedEventFilter = TypedEventFilter<UpgradeFeeReplaceProposedEvent>;

export interface UpgradeFeeReplacedEventObject {
  upgradeFee: BigNumber;
}
export type UpgradeFeeReplacedEvent = TypedEvent<[BigNumber], UpgradeFeeReplacedEventObject>;

export type UpgradeFeeReplacedEventFilter = TypedEventFilter<UpgradeFeeReplacedEvent>;

export interface QuestChainFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestChainFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    adminProposalTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    create(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createAndUpgrade(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createAndUpgradeWithPermit(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    executeAdminReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    executePaymentTokenReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    executeUpgradeFeeReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getQuestChainAddress(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    paymentTokenProposalTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeAdminReplace(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposePaymentTokenReplace(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposeUpgradeFeeReplace(
      _upgradeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposedAdmin(overrides?: CallOverrides): Promise<[string]>;

    proposedPaymentToken(overrides?: CallOverrides): Promise<[string]>;

    proposedUpgradeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    questChainCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    questChainTemplate(overrides?: CallOverrides): Promise<[string]>;

    questChainToken(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    upgradeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeFeeProposalTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeQuestChain(
      _questChainAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeQuestChainWithPermit(
      _questChainAddress: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  adminProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  create(
    _info: QuestChainCommons.QuestChainInfoStruct,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createAndUpgrade(
    _info: QuestChainCommons.QuestChainInfoStruct,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createAndUpgradeWithPermit(
    _info: QuestChainCommons.QuestChainInfoStruct,
    _salt: PromiseOrValue<BytesLike>,
    _deadline: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  executeAdminReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  executePaymentTokenReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  executeUpgradeFeeReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getQuestChainAddress(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  paymentTokenProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  proposeAdminReplace(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposePaymentTokenReplace(
    _paymentToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposeUpgradeFeeReplace(
    _upgradeFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposedAdmin(overrides?: CallOverrides): Promise<string>;

  proposedPaymentToken(overrides?: CallOverrides): Promise<string>;

  proposedUpgradeFee(overrides?: CallOverrides): Promise<BigNumber>;

  questChainCount(overrides?: CallOverrides): Promise<BigNumber>;

  questChainTemplate(overrides?: CallOverrides): Promise<string>;

  questChainToken(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  upgradeFee(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeFeeProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeQuestChain(
    _questChainAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeQuestChainWithPermit(
    _questChainAddress: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    adminProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    createAndUpgrade(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    createAndUpgradeWithPermit(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    executeAdminReplace(overrides?: CallOverrides): Promise<void>;

    executePaymentTokenReplace(overrides?: CallOverrides): Promise<void>;

    executeUpgradeFeeReplace(overrides?: CallOverrides): Promise<void>;

    getQuestChainAddress(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    paymentTokenProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAdminReplace(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    proposePaymentTokenReplace(_paymentToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    proposeUpgradeFeeReplace(_upgradeFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    proposedAdmin(overrides?: CallOverrides): Promise<string>;

    proposedPaymentToken(overrides?: CallOverrides): Promise<string>;

    proposedUpgradeFee(overrides?: CallOverrides): Promise<BigNumber>;

    questChainCount(overrides?: CallOverrides): Promise<BigNumber>;

    questChainTemplate(overrides?: CallOverrides): Promise<string>;

    questChainToken(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    upgradeFee(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeFeeProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeQuestChain(_questChainAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeQuestChainWithPermit(
      _questChainAddress: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdminReplaceProposed(address)'(proposedAdmin?: null): AdminReplaceProposedEventFilter;
    AdminReplaceProposed(proposedAdmin?: null): AdminReplaceProposedEventFilter;

    'AdminReplaced(address)'(admin?: null): AdminReplacedEventFilter;
    AdminReplaced(admin?: null): AdminReplacedEventFilter;

    'FactorySetup()'(): FactorySetupEventFilter;
    FactorySetup(): FactorySetupEventFilter;

    'PaymentTokenReplaceProposed(address)'(proposedPaymentToken?: null): PaymentTokenReplaceProposedEventFilter;
    PaymentTokenReplaceProposed(proposedPaymentToken?: null): PaymentTokenReplaceProposedEventFilter;

    'PaymentTokenReplaced(address)'(paymentToken?: null): PaymentTokenReplacedEventFilter;
    PaymentTokenReplaced(paymentToken?: null): PaymentTokenReplacedEventFilter;

    'QuestChainCreated(uint256,address)'(index?: null, questChain?: null): QuestChainCreatedEventFilter;
    QuestChainCreated(index?: null, questChain?: null): QuestChainCreatedEventFilter;

    'QuestChainUpgraded(address,address)'(sender?: null, questChain?: null): QuestChainUpgradedEventFilter;
    QuestChainUpgraded(sender?: null, questChain?: null): QuestChainUpgradedEventFilter;

    'UpgradeFeeReplaceProposed(uint256)'(proposedUpgradeFee?: null): UpgradeFeeReplaceProposedEventFilter;
    UpgradeFeeReplaceProposed(proposedUpgradeFee?: null): UpgradeFeeReplaceProposedEventFilter;

    'UpgradeFeeReplaced(uint256)'(upgradeFee?: null): UpgradeFeeReplacedEventFilter;
    UpgradeFeeReplaced(upgradeFee?: null): UpgradeFeeReplacedEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createAndUpgrade(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createAndUpgradeWithPermit(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    executeAdminReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    executePaymentTokenReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    executeUpgradeFeeReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getQuestChainAddress(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokenProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAdminReplace(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposePaymentTokenReplace(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposeUpgradeFeeReplace(
      _upgradeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposedAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    proposedPaymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    proposedUpgradeFee(overrides?: CallOverrides): Promise<BigNumber>;

    questChainCount(overrides?: CallOverrides): Promise<BigNumber>;

    questChainTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    questChainToken(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeFee(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeFeeProposalTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeQuestChain(
      _questChainAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeQuestChainWithPermit(
      _questChainAddress: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminProposalTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createAndUpgrade(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createAndUpgradeWithPermit(
      _info: QuestChainCommons.QuestChainInfoStruct,
      _salt: PromiseOrValue<BytesLike>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    executeAdminReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    executePaymentTokenReplace(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    executeUpgradeFeeReplace(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getQuestChainAddress(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentTokenProposalTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeAdminReplace(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposePaymentTokenReplace(
      _paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposeUpgradeFeeReplace(
      _upgradeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposedAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedPaymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedUpgradeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questChainToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeFeeProposalTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeQuestChain(
      _questChainAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeQuestChainWithPermit(
      _questChainAddress: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
